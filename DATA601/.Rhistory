scale_fill_brewer(palette = "Set1")
dia_ins <- ggplot(diabetes, aes(x=Insulin, colour = factor(Outcome), fill = factor(Outcome))) +
geom_density(alpha=0.3) +
geom_vline(aes(xintercept = mean(Insulin)),linetype="dashed",color="black",size=1) +
xlab("Insulin") +
ylab("Density") +
theme_bw() +
theme(legend.position="none",panel.border = element_blank(),
axis.line = element_line(colour = "black"))+
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
dia_pedf <- ggplot(diabetes, aes(x=DiabetesPedigreeFunction, colour = factor(Outcome),
fill = factor(Outcome))) +
geom_density(alpha=0.3) +
geom_vline(aes(xintercept = mean(DiabetesPedigreeFunction)),linetype="dashed",
color="black",size=1) +
xlab("Diabetes Pedigree Function") +
ylab("Density") +
theme_bw() +
theme(legend.position="none",panel.border = element_blank(),
axis.line = element_line(colour = "black"))+
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
dia_bpres <- ggplot(diabetes, aes(x=BloodPressure, colour = factor(Outcome),
fill = factor(Outcome))) +
geom_density(alpha=0.3) +
geom_vline(aes(xintercept = mean(BloodPressure)),linetype="dashed",color="black",size=1) +
xlab("BloodPressure") +
ylab("Density") +
theme_bw() +
theme(legend.position="none",panel.border = element_blank(),
axis.line = element_line(colour = "black"))+
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
dia_glu <- ggplot(diabetes, aes(x=Glucose, colour = factor(DiabetesResult),
fill = factor(DiabetesResult))) +
geom_density(alpha=0.3) +
geom_vline(aes(xintercept = mean(Glucose)),linetype="dashed",color="black",size=1) +
xlab("Glucose") +
ylab("Density") +
theme_bw()+
#scale_colour_discrete(name ="Outcome",labels=c("0", "1"))+
#scale_fill_discrete(name  ="Outcome",labels=c("0", "1"))+
theme(legend.position="bottom",legend.direction="horizontal",legend.title=element_text(size=8),
legend.text=element_text(size=7),panel.border = element_blank(),
axis.line = element_line(colour = "black"))+
scale_colour_brewer(palette = "Set1",name = "Diabetes") +
scale_fill_brewer(palette = "Set1",name = "Diabetes")
grid.arrange(dia_preg + ggtitle(""),
dia_bmi  + ggtitle(""),
dia_skin + ggtitle(""),
dia_age + ggtitle(""),
dia_bpres + ggtitle(""),
dia_ins + ggtitle(""),
dia_pedf +ggtitle(""),
dia_glu + ggtitle(""),
nrow = 3,
top = textGrob("Diabetes outcome density plot for selected variables",
gp=gpar(fontsize=14))
)
boxplot_pedigreef_outcome<- ggplot(diabetes,aes(x=DiabetesResult,y=DiabetesPedigreeFunction,
color=factor(DiabetesResult))) +
geom_boxplot(alpha=0.7)+
theme_bw() +
scale_colour_brewer(palette = "Set1",name = "Diabetes")
boxplot_pedigreef_outcome
positive <- subset(diabetes,diabetes$Outcome == 1)
summary(positive$DiabetesPedigreeFunction)
negative <- subset(diabetes,diabetes$Outcome == 0)
summary(negative$DiabetesPedigreeFunction)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
diabetes_normalized <- as.data.frame(lapply(diabetes[1:8], normalize)) #apply on first 8 numeric columns
head(diabetes_normalized,5)
diabetes_normalized <-cbind(diabetes_normalized,diabetes$Outcome) #append class:Outcome column now to normalized data set
colnames(diabetes_normalized)[9] <- "Outcome"
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
diabetes_normalized <- as.data.frame(lapply(diabetes[1:8], normalize)) #apply on first 8 numeric columns
head(diabetes_normalized,5)
diabetes_normalized <-cbind(diabetes_normalized,diabetes$Outcome) #append class:Outcome column now to normalized data set
colnames(diabetes_normalized)[9] <- "Outcome"
SEED <- 123
set.seed(SEED)
data <- diabetes_normalized[base::sample(nrow(diabetes_normalized)), ] # shuffle data first
bound <- floor(0.7 * nrow(diabetes_normalized)) #split the set, set 70% boundary
df_train <- data[1:bound, ]
df_test <- data[(bound + 1):nrow(data), ]
cat("Number of training and test samples are: ", nrow(df_train), nrow(df_test))
cat("\n")
cat("Number of training classes: \n", base::table(df_train$Outcome)/nrow(df_train)*100)
cat("\n")
cat("Number of test classes: \n", base::table(df_test$Outcome)/nrow(df_test)*100)
#naming the data samples we are going to use in training and testing
X_train <- subset(df_train, select=-Outcome) # exclude Outcome(categorical attribute) for prediction
y_train_labels <- df_train$Outcome
X_test <- subset(df_test, select=-Outcome)
y_test_labels <- df_test$Outcome
#cross-validation step
set.seed(SEED)
ctrl <- trainControl(method="repeatedcv", number=5, repeats=3)
nn_grid <- expand.grid(k=c(1,3,5,7,9)) #define grid
set.seed(SEED)
best_knn <- train(Outcome~.,
data=df_train,
method="knn",
trControl=ctrl,
preProcess = c("center", "scale"),
tuneGrid=nn_grid)
best_knn
#plot(best_knn)
#train model on train data using optimal k, test with test data
model_knn <- knn(train=X_train,
test=X_test,
cl=y_train_labels,  #class (Outcome) labels
k=5)
#crosstab: model lables prediction vs the actual labels
CrossTable(x=y_test_labels,y=model_knn,prop.chisq=FALSE)
confusion_matrix <-table(y_test_labels,model_knn)
cat("Test accuracy: ", round(sum(diag(confusion_matrix))/sum(confusion_matrix)*100),"%")
corrplot::corrplot(diabetes)
library(readr)
diabetes <- read_csv("Desktop/jklu/la/health-insurance-data/diabetes.csv")
library(corrplot)
library(readr)
dia <- read_csv("Desktop/diabetes.csv")
View(dia)
library(psych)
describe(dia)
summary(dia)
#Average Imputation Technique
dia[, 2:6][dia[, 2:6] == 0] <- NA
dia$Glucose[is.na(dia$Glucose)] <- mean(dia$Glucose, na.rm = TRUE)
dia$BloodPressure[is.na(dia$BloodPressure)] <- mean(dia$BloodPressure, na.rm = TRUE)
dia$SkinThickness[is.na(dia$SkinThickness)] <- mean(dia$SkinThickness, na.rm = TRUE)
dia$Insulin[is.na(dia$Insulin)] <- mean(dia$Insulin, na.rm = TRUE)
dia$BMI[is.na(dia$BMI)] <- mean(dia$BMI, na.rm = TRUE)
dia
summary(dia)
standardized_data <- scale(dia[, 2:8])
dia <- data.frame(dia, standardized_data)
dia
summary(dia)
norm <- function(x){
(x - min(x))/(max(x) - min(x))
}
norm_dia <- data.frame(apply(dia[,2:8], MARGIN = 2, FUN = "norm"))
dia1 <- data.frame(dia[,-(10:16)])
dia_new_norm <- data.frame(dia1,norm_dia)
dia_new_norm_Pregnancies1 <- as.factor(dia_new_norm$Pregnancies)
dia_new_norm <- data.frame(dia_new_norm,dia_new_norm_Pregnancies1)
DataExplorer::create_report(dia)
boxplot(norm_dia$DiabetesPedigreeFunction, dia$Age)
library(readr)
TC <- read_csv("TC.csv")
View(TC)
summary(TC)
TC$Id <- NULL
TC$Model <- NULL
TC$Fuel_Type <- NULL
TC$Color <- NULL
TC$Cylinders <- NULL
TC
#datascaling
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
scaling.df <- as.data.frame(lapply(TC, normalize))
scaling.df
norm <- function(x){
(x - min(x))/(max(x) - min(x))
}
norm_dia <- data.frame(apply(dia[,2:8], MARGIN = 2, FUN = "norm"))
library(readr)
dia <- read_csv("Desktop/diabetes.csv")
View(dia)
pie(table(dia$Outcome))
library(psych)
describe(dia)
summary(dia)
#Average Imputation Technique
dia[, 2:6][dia[, 2:6] == 0] <- NA
dia$Glucose[is.na(dia$Glucose)] <- mean(dia$Glucose, na.rm = TRUE)
dia$BloodPressure[is.na(dia$BloodPressure)] <- mean(dia$BloodPressure, na.rm = TRUE)
dia$SkinThickness[is.na(dia$SkinThickness)] <- mean(dia$SkinThickness, na.rm = TRUE)
dia$Insulin[is.na(dia$Insulin)] <- mean(dia$Insulin, na.rm = TRUE)
dia$BMI[is.na(dia$BMI)] <- mean(dia$BMI, na.rm = TRUE)
dia
summary(dia)
standardized_data <- scale(dia[, 2:8])
dia <- data.frame(dia, standardized_data)
dia
summary(dia)
norm <- function(x){
(x - min(x))/(max(x) - min(x))
}
norm_dia <- data.frame(apply(dia[,2:8], MARGIN = 2, FUN = "norm"))
dia1 <- data.frame(dia[,-(10:16)])
dia_new_norm <- data.frame(dia1,norm_dia)
dia_new_norm_Pregnancies1 <- as.factor(dia_new_norm$Pregnancies)
dia_new_norm <- data.frame(dia_new_norm,dia_new_norm_Pregnancies1)
summary(norm_dia)
boxplot(norm_dia$DiabetesPedigreeFunction)
boxplot(norm_dia$DiabetesPedigreeFunction)
boxplot(dia$Outcome)
boxplot(norm_dia$DiabetesPedigreeFunction, main = "Diabetes pedigree function")
library(readr)
diabetes <- read_csv("Desktop/jklu/la/health-insurance-data/diabetes.csv")
library(corrplot)
#install.packages("ggplot2")
#install.packages("gridExtra")
#install.packages("grid")
#install.packages("class")
#install.packages("base")
#install.packages("caret")
#install.packages("gmodels")
library(ggplot2)
library(gridExtra)
library(grid)
library(class)
library(base)
library(caret)
library(gmodels)
diabetes <- read_csv("Desktop/jklu/la/health-insurance-data/diabetes.csv")
#is.data.frame(diabetes)
head(diabetes,5)
summary(diabetes) #basic descriptive characteristics about data set
str(diabetes) #structure of the set
cat("\n")
diabetes$Outcome <- as.factor(diabetes$Outcome) #class variable
cat ("number of observations by class levels: ", table(diabetes$Outcome))
cat("\n")
cat("in percent: ",round(prop.table(table(diabetes$Outcome)) * 100, digits = 1))
cat("\n")
diabetes$DiabetesResult <- factor(diabetes$Outcome, levels = c("0", "1"), labels = c("negative", "positive"))
boxplot_pedigreef_outcome<- ggplot(diabetes,aes(x=DiabetesResult,y=DiabetesPedigreeFunction,
color=factor(DiabetesResult))) +
geom_boxplot(alpha=0.7)+
theme_bw() +
scale_colour_brewer(palette = "Set1",name = "Diabetes")
boxplot_pedigreef_outcome
positive <- subset(diabetes,diabetes$Outcome == 1)
summary(positive$DiabetesPedigreeFunction)
negative <- subset(diabetes,diabetes$Outcome == 0)
summary(negative$DiabetesPedigreeFunction)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
diabetes_normalized <- as.data.frame(lapply(diabetes[1:8], normalize)) #apply on first 8 numeric columns
head(diabetes_normalized,5)
diabetes_normalized <-cbind(diabetes_normalized,diabetes$Outcome) #append class:Outcome column now to normalized data set
colnames(diabetes_normalized)[9] <- "Outcome"
plot(diabetes$DiabetesPedigreeFunction)
boxplot(diabetes$DiabetesPedigreeFunction)
boxplot(diabetes_normalized$DiabetesPedigreeFunction)
boxplot(diabetes_normalized$DiabetesPedigreeFunction, main = "Diabetes Pedigree Function")
boxplot(diabetes_normalized$DiabetesPedigreeFunction, main = "Diabetes Pedigree Function")
boxplot(diabetes_normalized$Outcome)
boxplot(diabetes_normalized$DiabetesPedigreeFunction, main = "Diabetes Pedigree Function")
plot(diabetes_normalized$Outcome)
boxplot(diabetes_normalized$Outcome)
histogram(diabetes_normalized$Outcome)
pnorm(0.34)
pnorm(0.34)
pnorm(-1.75)
cells <- c(1,2,3,4)
cells
console(~25)
history(max.show = )
d <- c("a","b","c","d")
e <- grep("[Tt]+",d,perl = T,value = T)
e
?dplyr
corrgram::corrgram(ToyotaCorolla)
install.packages("swirl")
install.packages(c("tidyverse", "ggplot2", "readr"))
install.packages(c("tidyverse", "ggplot2", "readr"))
install.packages(c("tidyverse", "ggplot2", "readr"))
install.packages(c("tidyverse", "ggplot2", "readr"))
library(swirl)
swirl()
5 + 7
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
library(nycflights13)
library(tidyverse)
library(tidyverse)
library(nycflights13)
clearPushBack()
library(nycflights13)
flights
library(nycflights13)
view(flights)
library(nycflights13)
view(flights)
library(nycflights13)
flights
filter(flights, month == 1, day == 1)
filter(flights, month == 1, day == 1)
filter(flights, month == 1, dep_delay == 1)
library(ggplot2)
library(ggplot2)
library(tidyverse)
library(ggplot2)
library(tidyverse)
library(nycflights13)
view(flights)
colnames(flights)
colnames(flights)
summary(flights)
filter(flights, day == 1, month == 1)
x <- filter(flights, day == 1, month == 1)
x
x <- filter(flights, day == 1, month == 1)
view(x)
x <- filter(flights, day == 1, month == 1)
table(x)
x <- filter(flights, day == 1, month == 1)
table(x)
x <- filter(flights, day == 1, month == 1)
filter(flights, day == 1, month == 1)
filter(flights, origin == 'EWR', distance == >100)
filter(flights, day == 1, month == 1)
filter(flights, origin == 'EWR', distance == '>100')
y<- filter(flights, day == 1, month == 1)
x<- filter(flights, origin == 'EWR', distance == '>100')
x
y<- filter(flights, day == 1, month == 1)
x<- filter(flights, origin == 'EWR')
x
y<- filter(flights, day == 1, month == 1)
x<- filter(flights, origin == 'EWR')
x
count(x)
library(ggplot2)
library(tidyverse)
library(nycflights13)
main.df <- flights
summary(main.df)
y<- filter(flights, day == 1, month == 1)
x<- filter(flights, origin == 'EWR')
class(x)
tibble(
a = 1:30,
b = 15:30,
c = x ^ a + 1
)
tibble(
a = 1:30,
b = 1,
c = x ^ a + 1
)
tibble(
a = 1:30,
b = 15:45,
c = b ^ a + 1
)
tibble(
a = 1:30,
b = 15,
c = 16
)
tibble(
a = 1:30,
b = 15,
c = 10:40
)
tibble(
a = 1:30,
b = 15,
c = 10:39
)
as_tibble(flights)
as_tibble(flights)
describe(flights)
library(psych)
as_tibble(flights)
describe(flights)
library(psych)
describe(flights)
dim(flights)
as_tibble(flights)
table(flights$origin)
table(flights$origin, flights$dest)
tibble(
a = 1:30,
b = 15,
c = 10:39
)
tibble(
city = NYC, NYC, London, London, China, China,
particlesize = large, small, large, small,large, small,
amount = 23, 14, 22, 16, 121, 56
)
tibble(
city = 'NYC', 'NYC', London, London, China, China,
particlesize = large, small, large, small,large, small,
amount = 23, 14, 22, 16, 121, 56
)
tibble(
city = 'NYC', 'NYC', 'London', 'London', 'China', 'China',
particlesize = 'large', 'small', 'large', 'small','large', 'small',
amount = 23, 14, 22, 16, 121, 56
)
testtable <- matrix(c('NYC', 'NYC', 'London', 'London', 'China', 'China', 'large', 'small', 'large', 'small','large', 'small', 23, 14, 22, 16, 121, 56),  ncol= 3, byrow =  FALSE)
colnames(testtable) <- c('city', 'particlesize', 'amount')
testtable <- as.table(testtable)
testtable
testtable <- matrix(c('NYC', 'NYC', 'London', 'London', 'China', 'China', 'large', 'small', 'large', 'small','large', 'small', 23, 14, 22, 16, 121, 56),  ncol= 3, byrow =  FALSE)
colnames(testtable) <- c('city', 'particlesize', 'amount')
testtable <- as.table(testtable)
view(testtable)
view(main.df)
view(main.df)
colnames(main.df)
table(select(main.df, origin))
table(select(main.df, origin))
table(select(main.df, dest))
select(main.df, starts_with("A"))
select(main.df, starts_with("A"))
select(main.df, contains("arr"))
select(main.df, starts_with("A"))
select(main.df, contains("arr"))
select(main.df, ends_with("time"))
testplay <- main.df
unite(testplay, "date", day, month, year, sep = "-")
separate(trunback, date, c("day", "month", "year"), sep = "-")
separate(testplay, date, c("day", "month", "year"), sep = "-")
view(testplay)
summary(testplay$hour)
testplayupdate %>%
select(testplay) %>%
table() %>%
testplayupdate %>%
select(testplay) %>%
table()
testplay %>%
select(testplay) %>%
table()
testplay %>%
select(testplay$hour) %>%
table()
select(testplay, day, dep_time)
select(testplay, day, dep_time)
arrange(testplay, month, year, day )
filter(testplay, year >= 2007, origin == 'EWR')
filter(testplay, year >= 2007, origin == 'EWR')
select(testplay, year >= 2007, origin == 'EWR' )
#Assignment:
colnames(testplay)
filter(testplay, arr_delay >= 2)
filter(testplay, arr_delay >= 2)
filter(testplay, dest == IAH | dest == HOU)
filter(testplay, arr_delay >= 2)
filter(testplay, dest == 'IAH' | dest == 'HOU')
filter(testplay, dest %in% c(IAH, HOU))
filter(testplay, arr_delay >= 2)
filter(testplay, dest == 'IAH' | dest == 'HOU')
filter(testplay, dest %in% c('IAH', 'HOU'))
filter(testplay, arr_delay >= 2)
filter(testplay, dest == 'IAH' | dest == 'HOU')
filter(testplay, dest %in% c('IAH', 'HOU'))
table(testplay$carrier)
arrange(testplay, hour, minute)
arrange(testplay, hour, minute)
arrange(testplay, desc(testplay))
mutatetest <- select(testplay,
year:day, ends_with("delay"), contains("hour"), distance, air_time
)
mutate(mutatetest,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
summarytest <- group_by(testplay, year, month, day)
summarise(summarytest, delayset = mean(dep_delay, na.rm = TRUE))
colnames(testplay)
#Univariate Bascis
ggplot2(testplay, aes(distance)) + geom_histogram()
#Univariate Bascis
library(ggplot2)
ggplot2(testplay, aes(distance)) + geom_histogram()
#Univariate Bascis
library(ggplot)
#Univariate Bascis
library(tidyverse)
library(ggplot2)
ggplot2(testplay, aes(distance)) + geom_histogram()
#Univariate Bascis
library(tidyverse)
ggplot(testplay, aes(distance)) + geom_histogram()
ggplot(testplay, mapping = aes(arr_delay))
ggplot(testplay, mapping = aes(arr_delay))
ggplot(testplay, mapping = aes(arr_delay)) + geom_histogram()
#Plotting density
ggplot(testplay, aes(testplay$arr_delay)) + geom_histogram(aes(..density..), alpha = 0.5) + geom_density(alpha = 0.2, fill = 'red')
#Plotting density
ggplot(testplay, aes(arr_delay)) + geom_histogram(aes(..density..), alpha = 0.5) + geom_density(alpha = 0.2, fill = 'red')
#Plotting density
ggplot(testplay, aes(arr_delay)) + geom_histogram(aes(y= ..density..), alpha = 0.5) + geom_density(alpha = 0.2, fill = 'red')
ggplot(testplay, aes(arr_time, sched_arr_time)) + geom_point()
ggplot(testplay, aes(arr_time, sched_arr_time)) + geom_point()
ggplot(testplay, aes(arr_time, sched_arr_time)) + geom_boxplot()
setwd("~/Desktop/MSDACSS/DATA601")
library(latexpdf)
library(tinytex)
#Loading the Data
#About Dataset: This dataset has the data related to covid19 vaccinations around the world.
library(tidyverse)
library(dplyr)
testdata <- read_csv("country_vaccinations.csv - Sheet1.csv") #Tibble #reading the data
update.packages(ask = FALSE, checkBuilt = TRUE)
